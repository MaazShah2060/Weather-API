<?php

declare(strict_types=1);

/*
 * WeatherAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace WeatherAPILib;

use WeatherAPILib\Controllers;

/**
 * WeatherAPILib client class
 */
class WeatherAPIClient implements ConfigurationInterface
{
    private $simpleWeather;

    private $timeout = ConfigurationDefaults::TIMEOUT;
    private $environment = ConfigurationDefaults::ENVIRONMENT;
    private $accessToken = ConfigurationDefaults::ACCESS_TOKEN;
    private $accessTokenManager;
    private $authManagers = [];
    private $httpCallback;

    public function __construct(array $configOptions = null)
    {
        if (isset($configOptions['timeout'])) {
            $this->timeout = $configOptions['timeout'];
        }
        if (isset($configOptions['environment'])) {
            $this->environment = $configOptions['environment'];
        }
        if (isset($configOptions['accessToken'])) {
            $this->accessToken = $configOptions['accessToken'];
        }
        if (isset($configOptions['httpCallback'])) {
            $this->httpCallback = $configOptions['httpCallback'];
        }

        $this->accessTokenManager = new AccessTokenManager($this->accessToken);
        $this->authManagers['global'] = $this->accessTokenManager;
    }

    /**
     * Get the client configuration as an associative array
     */
    public function getConfiguration(): array
    {
        $configMap = [];

        if (isset($this->timeout)) {
            $configMap['timeout'] = $this->timeout;
        }
        if (isset($this->environment)) {
            $configMap['environment'] = $this->environment;
        }
        if ($this->getAccessTokenCredentials()->getAccessToken() !== null) {
            $configMap['accessToken'] = $this->getAccessTokenCredentials()->getAccessToken();
        }
        if (isset($this->httpCallback)) {
            $configMap['httpCallback'] = $this->httpCallback;
        }

        return $configMap;
    }

    /**
     * Clone this client and override given configuration options
     */
    public function withConfiguration(array $configOptions): self
    {
        return new self(\array_merge($this->getConfiguration(), $configOptions));
    }

    public function getTimeout(): int
    {
        return $this->timeout;
    }

    public function getEnvironment(): string
    {
        return $this->environment;
    }

    public function getAccessTokenCredentials(): ?AccessTokenCredentials
    {
        return $this->accessTokenManager;
    }

    /**
     * Get the base uri for a given server in the current environment
     *
     * @param  string $server Server name
     *
     * @return string         Base URI
     */
    public function getBaseUri(string $server = Server::DEFAULT_): string
    {
        return static::ENVIRONMENT_MAP[$this->environment][$server];
    }

    /**
     * Returns Simple Weather Controller
     */
    public function getSimpleWeatherController(): Controllers\SimpleWeatherController
    {
        if ($this->simpleWeather == null) {
            $this->simpleWeather = new Controllers\SimpleWeatherController(
                $this,
                $this->authManagers,
                $this->httpCallback
            );
        }
        return $this->simpleWeather;
    }

    /**
     * A map of all baseurls used in different environments and servers
     *
     * @var array
     */
    private const ENVIRONMENT_MAP = [
        Environment::PRODUCTION => [
            Server::DEFAULT_ => 'https://api.openweathermap.org/data/2.5/weather',
        ],
    ];
}
